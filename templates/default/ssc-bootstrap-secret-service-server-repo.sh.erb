#!/bin/bash
set -e

# default backend
SECRET_SERVICE_DOMAIN=<%= node['secret_service']['domain'] %>
SECRET_SERVICE_ACCESSUSER=<%= node['secret_service']['accessuser'] %>
SECRET_SERVICE_ACCESSUSERKEY=<%= node['secret_service']['accessuserkey']  %>

SECRET_SERVICE_SERVER_HOST=<%= node['secret_service']['server']['host'] %>
SECRET_SERVICE_SERVER_REPO=<%= node['secret_service']['server']['repo'] %>

SECRET_SERVICE_CLIENT_USER=<%= node['secret_service']['client']['user'] %>
SECRET_SERVICE_CLIENT_REPO=<%= node['secret_service']['client']['repo']%>

USERLIST_CSV=$(mktemp)
TMPSTRUCT=$(mktemp -d)
SSH_OPTS="-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
if [ ! -f ${SECRET_SERVICE_ACCESSUSERKEY} ];then
  echo "-----------------------------------------------"
  echo "ERROR: Access Keyfile not found!"
  echo "Please put a id_rsa private keyfile at"
  echo "${SECRET_SERVICE_ACCESSUSERKEY}"
  echo "and test the login with:"
  echo "ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} \"cat ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/userlist.csv\""
  echo "-----------------------------------------------"
  exit 1
fi

# Test the login first
EVERYTHING_FINE=1
ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "ls -1 / > /dev/null"
if [ $? -ne 0 ];then echo "ERROR: login with user ${SECRET_SERVICE_ACCESSUSER} on secret-service server ${SECRET_SERVICE_SERVER_HOST} failed."; EVERYTHING_FINE=0;fi
ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "ls -1 ${SECRET_SERVICE_SERVER_REPO} > /dev/null"
if [ $? -ne 0 ];then echo "ERROR: secret-service server repo folder ${SECRET_SERVICE_SERVER_REPO} not found."; EVERYTHING_FINE=0;fi

# Create domain folder if not exists.
ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "if [ ! -d ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN} ];then mkdir ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN};fi > /dev/null"

ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "ls -1 ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN} > /dev/null"
if [ $? -ne 0 ];then echo "ERROR: secret-service server repo domainfolder ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN} not found."; EVERYTHING_FINE=0;fi

ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "touch ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/testfile"
if [ $? -ne 0 ];then echo "ERROR: cannot write in secret-service server repo domainfolder ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}."; EVERYTHING_FINE=0;fi
ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST} "rm ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/testfile"
if [ $? -ne 0 ];then echo "ERROR: cannot delete in secret-service server repo domainfolder ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}."; EVERYTHING_FINE=0;fi

if [ $EVERYTHING_FINE -ne 1 ];then
  echo "-----------------------------------------------"
  echo "ERROR: Could not log into secret-server with this cmd:"
  echo "ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}"
  echo "Please make sure that:"
  echo "a) a user ${SECRET_SERVICE_ACCESSUSER} exists on secret-service server ${SECRET_SERVICE_SERVER_HOST}."
  echo "b) the public key part of the key ${SECRET_SERVICE_ACCESSUSERKEY} is in the ~/.ssh/authorized_keys file of user ${SECRET_SERVICE_ACCESSUSER}."
  echo "c) there is a folder ${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN} on ther secret-service server."
  echo "d) user ${SECRET_SERVICE_ACCESSUSER} has write permission to this folder."
  echo "-----------------------------------------------"
  exit 1
fi

# Check if there's an injected userlist.csv
# otherwise try to download it from server
if [ ! -z "$(grep dummyuserlist /tmp/userlist.csv)" ];then
  scp -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS \
  ${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}:${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/userlist.csv \
  ${USERLIST_CSV}

  if [ -z "$(grep '^testuser;' ${USERLIST_CSV})" ];then
    echo "Adding user testuser."
    echo 'testuser;Theo;Testuser;theo.testuser@example.com;Testcompany GmbH' >> ${USERLIST_CSV}
  fi
else
  cat /tmp/userlist.csv > ${USERLIST_CSV}
fi

mkdir -p $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}

cat ${USERLIST_CSV} > $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/userlist.csv

# sync all users from workshop-tpl
rsync -avzx -e "ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS" \
${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}:${SECRET_SERVICE_SERVER_REPO}/workshop-tpl/user/ \
$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/

for U in $(ls -1 $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/);do
  echo "Checking user $U..."
  if [ -z $(grep "^$U;" $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/userlist.csv) ];then
    echo "User $U not in userlist.csv. Adding..."
    echo "$U;$(<$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/$U/firstname);$(<$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/$U/lastname);$(<$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/$U/email);$(<$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/$U/company)" \
     >> $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/userlist.csv
  fi
done

# generate uniq Event/Domain Key
# it is safe here to generate a new uniq key every time because an existing one will not be
# overridden by the uploading rsync at the end of this script.
pwgen -1 > $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/domainkey

while read ULINE;do
  echo "........................."
  echo "LINE: $ULINE"
  USER=$(echo $ULINE | cut -d';' -f1)
  FIRSTNAME="$(echo $ULINE | cut -d';' -f2)"
  LASTNAME="$(echo $ULINE | cut -d';' -f3)"
  EMAIL=$(echo $ULINE | cut -d';' -f4)
  COMPANY=$(echo $ULINE | cut -d';' -f5)
  echo "User: $USER"
  echo "Firstname: $FIRSTNAME"
  echo "Lastname: $LASTNAME"
  echo "Email: $EMAIL"
  echo "Company: $COMPANY"

  USERDIR=$TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/$USER/
  mkdir -p $USERDIR/.ssh
  echo "$FIRSTNAME" > $USERDIR/firstname
  echo "$LASTNAME" > $USERDIR/lastname
  echo "$EMAIL" > $USERDIR/email
  echo "$COMPANY" > $USERDIR/company

  # use injected passwords if found in tmp
  if [ -f /tmp/${USER}_password ];then
    cat /tmp/${USER}_password > $USERDIR/password
  else
    if [ -n "$(echo ${USER} | grep '^user[0-9]*$')" ];
      echo ${USER} > $USERDIR/password
    else
      pwgen -1 > $USERDIR/password
    fi
  fi
  if [ -f /tmp/${USER}_authorized_keys ];then
    cat /tmp/${USER}_authorized_keys > $USERDIR/.ssh/authorized_keys
  fi
  if [ -f /tmp/${USER}_password_sha512 ];then
    cat /tmp/${USER}_password_sha512 > $USERDIR/password_sha512
  else
    cat $USERDIR/password | mkpasswd -s -m sha-512 > $USERDIR/password_sha512
  fi
  if [ -f /tmp/${USER}_id_rsa -a -f /tmp/${USER}_id_rsa.pub ];then
    cat /tmp/${USER}_id_rsa > $USERDIR/.ssh/id_rsa
    cat /tmp/${USER}_id_rsa.pub > $USERDIR/.ssh/id_rsa.pub
  else
    ssh-keygen -t rsa -b 2048 -C $USER -f $USERDIR/.ssh/id_rsa -N '' > /dev/null
  fi

done < ${USERLIST_CSV}

echo "DEBUG:"
cat ${USERLIST_CSV}
echo "---------------------"
find $TMPSTRUCT
echo "---------------------"
#cat $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/pingworks/password
#cat $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/pingworks/password_sha512
#echo "---------------------"

# upload the potentially updated userlist
scp -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS \
${USERLIST_CSV} \
${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}:${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/userlist.csv

# sync the domainkey (only if missing)
rsync -avzx --ignore-existing -e "ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS" $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/domainkey \
${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}:${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/domainkey

# update users (delete if neccessary)
rsync -avzx --ignore-existing --delete -e "ssh -i ${SECRET_SERVICE_ACCESSUSERKEY} $SSH_OPTS" $TMPSTRUCT/${SECRET_SERVICE_DOMAIN}/user/ \
${SECRET_SERVICE_ACCESSUSER}@${SECRET_SERVICE_SERVER_HOST}:${SECRET_SERVICE_SERVER_REPO}/${SECRET_SERVICE_DOMAIN}/user/

rm -rf $TMPSTRUCT
rm ${USERLIST_CSV}
